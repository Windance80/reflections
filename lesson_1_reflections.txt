Syntaxs:
$ FC 
	# File compare command prompt in windows for comparing two files
$ diff 
	# File compare in linux
$ pwd 
	# Shows working directory
$ ls
	# List the files in this directory
$ ls -a
	# Display hidden files also
$ cd ~
    # change directories to your home directory
$ mkdir "name"         
	# make directory
$ cd C:/Program\ Files\ \(x86\)/
	# go to "C:/Program Files (x86)/" directory
$ git version
	# Check git version

$ git log
	# To see every commit from start
$ git log --stat
	# Statistic of files in each commit
$ git log --graph --oneline "label_name1" "label_name2"
	# Visualize branch structure between "label_name1" and "label_name2",  --oneline: to make easier to read
$ q
	# Quit the log

$ git diff
	# Compare staging area with working directory
$ git diff "commit1" "commit2"
	# Compare commit2 to commit1
$ git diff --staged
	# Compare Repository with Staging Area

$ git clone "url"
	# To clone repository

$ git config --global color.ui.auto
	# To get colored diff output

$ git checkout "branch_label"
	# To attached HEAD
$ git checkout "commit"
	# Checking the commit


What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?

 Manually for coding program is much better, cause we can determine when to commit instead of doing it auto which can get the code become useless


Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

 Because the file is inter-correlated.

How can you use the commands git log and git diff to view the history of files?

 git log looking the history of commit, git diff to make the comparison

How might using version control make you more confident to make changes that could break something?
 
 Because with version control I can restore the previous repository before changes were made.

Now that you have your workspace set up, what do you want to try using Git for?

 Using git for version control.. Thats It!!! Nothing else!!!