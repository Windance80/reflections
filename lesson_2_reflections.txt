Syntaxs:
$ git init 
	# Create an empty repository in current directory
$ git status
	# Show files that changed since the last commit
$ git add "file_name"
	# To add the file to staging area before being committed

$ git reset "file_name"
	# Remove the file from staging area
$ git reset --hard
	# Remove every changes to Working directory and Stagin Area with Repository

$ git commit -m "Commit_message"'
	# Commit the the files in staging area, -m specify commit message line

$ git branch
	# Shows the all branch
$ git branch "label_name"
	# Create a new branch with "label_name"
$ git branch -d "label_name"
	# -d, delete the branch "label_name"

$ git merge "label_name1" "label_name2"
	# Merge "label_name1" and "label_name2" and update the current checkout branch to point to the merge version
$ git merge --abort
	# Restore files to their state before the merge, if there was a conflict detected

$ git show "commit"
	# Compare "commit" with the parent

$ git gc
	# Runs Git's garbage collection


 What happens when you initialize a repository? Why do you need to do it?

  Git create a new empty Git repository, needed because want to track what has been changed.

 How is the staging area different from the working directory and the repository? What value do you think it offers?

  Staging are for files that is about to be committed, Working directory is the physical file on directory.
  It offers flexibility to add manually, instead automatically from git.

 How can you use the staging area to make sure you have one commit per logical change?

  By adding with git add to the staging area, and check it using git diff, this will compare what file has been change by comparing staging area with working directory.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

 Branches help when need to add features or translate diff languange, by brancing and keeping the master project intact.

How do the diagrams help you visualize the branch structure?

 It helps which branches goes to which commits

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

 Merging two branches together will result a new combine branch with both version, represent in diagram to keep track easily

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

 Pros is that git can mark the difference of both file that has been change, and let the user fix the difference
 Cons in always manually is that the changes that have been made the computer wouldn't know which one to keep instead